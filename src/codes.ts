let tfsecCodes = new Map();

tfsecCodes.set("AWS001", "S3 Bucket has an ACL defined which allows public access.");
tfsecCodes.set("AWS002", "S3 Bucket does not have logging enabled.");
tfsecCodes.set("AWS003", "AWS Classic resource usage.");
tfsecCodes.set("AWS004", "Use of plain HTTP.");
tfsecCodes.set("AWS005", "Load balancer is exposed to the internet.");
tfsecCodes.set("AWS006", "An ingress security group rule allows traffic from `/0`.");
tfsecCodes.set("AWS007", "An egress security group rule allows traffic to `/0`.");
tfsecCodes.set("AWS008", "An inline ingress security group rule allows traffic from `/0`.");
tfsecCodes.set("AWS009", "An inline egress security group rule allows traffic to `/0`.");
tfsecCodes.set("AWS010", "An outdated SSL policy is in use by a load balancer.");
tfsecCodes.set("AWS011", "A resource is marked as publicly accessible.");
tfsecCodes.set("AWS012", "A resource has a public IP address.");
tfsecCodes.set("AWS013", "Task definition defines sensitive environment variable(s).");
tfsecCodes.set("AWS014", "Launch configuration with unencrypted block device.");
tfsecCodes.set("AWS015", "Unencrypted SQS queue.");
tfsecCodes.set("AWS016", "Unencrypted SNS topic.");
tfsecCodes.set("AWS017", "Unencrypted S3 bucket.");
tfsecCodes.set("AWS018", "Missing description for security group/security group rule.");
tfsecCodes.set("AWS019", "A KMS key is not configured to auto-rotate.");
tfsecCodes.set("AWS020", "CloudFront distribution allows unencrypted (HTTP) communications.");
tfsecCodes.set("AWS021", "CloudFront distribution uses outdated SSL/TLS protocols.");
tfsecCodes.set("AWS022", "A MSK cluster allows unencrypted data in transit.");
tfsecCodes.set("AWS023", "ECR repository has image scans disabled.");
tfsecCodes.set("AWS024", "Kinesis stream is unencrypted.");
tfsecCodes.set("AWS025", "API Gateway domain name uses outdated SSL/TLS protocols.");
tfsecCodes.set("AWS031", "Elasticsearch domain isn't encrypted at rest.");
tfsecCodes.set("AWS032", "Elasticsearch domain uses plaintext traffic for node to node communication.");
tfsecCodes.set("AWS033", "Elasticsearch doesn't enforce HTTPS traffic.");
tfsecCodes.set("AWS034", "Elasticsearch domain endpoint is using outdated TLS policy.");
tfsecCodes.set("AWS035", "Unencrypted Elasticache Replication Group.");
tfsecCodes.set("AWS036", "Elasticache Replication Group uses unencrypted traffic.");
tfsecCodes.set("AWS037", "IAM Password policy should prevent password reuse.");
tfsecCodes.set("AWS038", "IAM Password policy should have expiry less than or equal to 90 days.");
tfsecCodes.set("AWS039", "IAM Password policy should have minimum password length of 14 or more characters.");
tfsecCodes.set("AWS040", "IAM Password policy should have requirement for at least one symbol in the password.");
tfsecCodes.set("AWS041", "IAM Password policy should have requirement for at least one number in the password.");
tfsecCodes.set("AWS042", "IAM Password policy should have requirement for at least one lowercase character.");
tfsecCodes.set("AWS043", "IAM Password policy should have requirement for at least one uppercase character.");
tfsecCodes.set("AWS044", "AWS provider has access credentials specified.");
tfsecCodes.set("AWS045", "CloudFront distribution does not have a WAF in front.");
tfsecCodes.set("AWS046", "AWS IAM policy document has wildcard action statement.");
tfsecCodes.set("AWS047", "AWS SQS policy document has wildcard action statement.");
tfsecCodes.set("AWS048", "EFS Encryption has not been enabled");
tfsecCodes.set("AWS049", "An ingress Network ACL rule allows specific ports from `/0`.");
tfsecCodes.set("AWS050", "An ingress Network ACL rule allows ALL ports from `/0`.");
tfsecCodes.set("AWS051", "There is no encryption specified or encryption is disabled on the RDS Cluster.");
tfsecCodes.set("AWS052", "RDS encryption has not been enabled at a DB Instance level.");
tfsecCodes.set("AWS053", "Encryption for RDS Perfomance Insights should be enabled.");
tfsecCodes.set("AWS054", "ElasticSearch domains should enforce HTTPS");
tfsecCodes.set("AWS055", "ElasticSearch nodes should communicate with node to node encryption enabled.");
tfsecCodes.set("AWS057", "Domain logging should be enabled for Elastic Search domains");
tfsecCodes.set("AWS058", "Ensure that lambda function permission has a source arn specified");
tfsecCodes.set("AWS059", "Athena databases and workgroup configurations are created unencrypted at rest by default, they should be encrypted");
tfsecCodes.set("AWS060", "Athena workgroups should enforce configuration to prevent client disabling encryption");
tfsecCodes.set("AWS061", "API Gateway stages for V1 and V2 should have access logging enabled");
tfsecCodes.set("AWS062", "User data for EC2 instances must not contain sensitive AWS keys");
tfsecCodes.set("AWS063", "Cloudtrail should be enabled in all regions regardless of where your AWS resources are generally homed");
tfsecCodes.set("AWS064", "Cloudtrail log validation should be enabled to prevent tampering of log data");
tfsecCodes.set("AWS065", "Cloudtrail should be encrypted at rest to secure access to sensitive trail data");
tfsecCodes.set("AWS066", "EKS should have the encryption of secrets enabled");
tfsecCodes.set("AWS067", "EKS Clusters should have cluster control plane logging turned on");
tfsecCodes.set("AWS068", "EKS cluster should not have open CIDR range for public access");
tfsecCodes.set("AWS069", "EKS Clusters should have the public access disabled");
tfsecCodes.set("AWS070", "AWS ES Domain should have logging enabled");
tfsecCodes.set("AWS071", "Cloudfront distribution should have Access Logging configured");
tfsecCodes.set("AWS072", "Viewer Protocol Policy in Cloudfront Distribution Cache should always be set to HTTPS");
tfsecCodes.set("AWS073", "S3 Access Block should Ignore Public Acl");
tfsecCodes.set("AWS074", "S3 Access block should block public ACL");
tfsecCodes.set("AWS075", "S3 Access block should restrict public bucket to limit access");
tfsecCodes.set("AWS076", "S3 Access block should block public policy");
tfsecCodes.set("AWS077", "S3 Data should be versioned");
tfsecCodes.set("AZU001", "An inbound network security rule allows traffic from `/0`.");
tfsecCodes.set("AZU002", "An outbound network security rule allows traffic to `/0`.");
tfsecCodes.set("AZU003", "Unencrypted managed disk.");
tfsecCodes.set("AZU004", "Unencrypted data lake storage.");
tfsecCodes.set("AZU005", "Password authentication in use instead of SSH keys.");
tfsecCodes.set("AZU006", "Ensure AKS cluster has Network Policy configured");
tfsecCodes.set("AZU007", "Ensure RBAC is enabled on AKS clusters");
tfsecCodes.set("AZU008", "Ensure AKS has an API Server Authorized IP Ranges enabled");
tfsecCodes.set("AZU009", "Ensure AKS logging to Azure Monitoring is Configured");
tfsecCodes.set("AZU010", "Ensure HTTPS is enabled on Azure Storage Account");
tfsecCodes.set("AZU011", "Storage containers in blob storage mode should not have public access");
tfsecCodes.set("AZU012", "The default action on Storage account network rules should be set to deny");
tfsecCodes.set("AZU013", "Trusted Microsoft Services should have bypass access to Storage accounts");
tfsecCodes.set("AZU014", "Storage accounts should be configured to only accept transfers that are over secure connections");
tfsecCodes.set("AZU015", "The minimum TLS version for Storage Accounts should be TLS1_2");
tfsecCodes.set("AZU016", "When using Queue Services for a storage account, logging should be enabled.");
tfsecCodes.set("AZU017", "SSH access should not be accessible from the Internet, should be blocked on port 22");
tfsecCodes.set("AZU018", "Auditing should be enabled on Azure SQL Databases");
tfsecCodes.set("AZU019", "Database auditing rentention period should be longer than 90 days");
tfsecCodes.set("AZU020", "Key vault should have the network acl block specified");
tfsecCodes.set("GCP001", "Unencrypted compute disk.");
tfsecCodes.set("GCP003", "An inbound firewall rule allows traffic from `/0`.");
tfsecCodes.set("GCP004", "An outbound firewall rule allows traffic to `/0`.");
tfsecCodes.set("GCP005", "Legacy ABAC permissions are enabled.");
tfsecCodes.set("GCP006", "Node metadata value disables metadata concealment.");
tfsecCodes.set("GCP007", "Legacy metadata endpoints enabled.");
tfsecCodes.set("GCP008", "Legacy client authentication methods utilized.");
tfsecCodes.set("GCP009", "Pod security policy enforcement not defined.");
tfsecCodes.set("GCP010", "Shielded GKE nodes not enabled.");
tfsecCodes.set("GCP011", "IAM granted directly to user.");
tfsecCodes.set("GCP012", "Checks for service account defined for GKE nodes");
tfsecCodes.set("GEN001", "Potentially sensitive data stored in 'default' value of variable.");
tfsecCodes.set("GEN002", "Potentially sensitive data stored in local value.");
tfsecCodes.set("GEN003", "Potentially sensitive data stored in block attribute.");

export const Codes = tfsecCodes;